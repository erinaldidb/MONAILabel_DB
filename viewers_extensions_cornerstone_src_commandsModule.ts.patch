diff --git a/extensions/cornerstone/src/commandsModule.ts b/extensions/cornerstone/src/commandsModule.ts
index 237e78df0..ee924f3df 100644
--- a/extensions/cornerstone/src/commandsModule.ts
+++ b/extensions/cornerstone/src/commandsModule.ts
@@ -33,6 +33,7 @@ import toggleVOISliceSync from './utils/toggleVOISliceSync';
 import { usePositionPresentationStore, useSegmentationPresentationStore } from './stores';
 import { toolNames } from './initCornerstoneTools';
 import CornerstoneViewportDownloadForm from './utils/CornerstoneViewportDownloadForm';
+import CornerstoneVLMViewportForm from './utils/CornerstoneVLMViewportForm';
 import { updateSegmentBidirectionalStats } from './utils/updateSegmentationStats';
 import { generateSegmentationCSVReport } from './utils/generateSegmentationCSVReport';
 import { getUpdatedViewportsForSegmentation } from './utils/hydrationUtils';
@@ -769,6 +770,33 @@ function commandsModule({
         });
       }
     },
+    // AI VLM viewport
+    showDownloadVLMViewportModal: () => {
+      const { activeViewportId } = viewportGridService.getState();
+
+      if (!cornerstoneViewportService.getCornerstoneViewport(activeViewportId)) {
+        uiNotificationService.show({
+          title: 'VLM Analyzer',
+          message: 'Image cannot be analyzed',
+          type: 'error',
+        });
+        return;
+      }
+
+      const { uiModalService } = servicesManager.services;
+
+      if (uiModalService) {
+        uiModalService.show({
+          content: CornerstoneVLMViewportForm,
+          title: 'VLM Analyzer',
+          contentProps: {
+            activeViewportId,
+            cornerstoneViewportService,
+          },
+          containerClassName: 'max-w-4xl p-4',
+        });
+      }
+    },
     rotateViewport: ({ rotation }) => {
       const enabledElement = _getActiveViewportEnabledElement();
       if (!enabledElement) {
@@ -1872,6 +1900,9 @@ function commandsModule({
     showDownloadViewportModal: {
       commandFn: actions.showDownloadViewportModal,
     },
+    showDownloadVLMViewportModal: {
+      commandFn: actions.showDownloadVLMViewportModal,
+    },
     toggleCine: {
       commandFn: actions.toggleCine,
     },
